import random
from typing import Optional, Tuple
from core.character import Character
from core.enemy import Enemy
from utils.logger import battle_log


class Battle:
    def __init__(self, character: Character, enemy: Enemy):
        self.character = character
        self.enemy = enemy
        self.turn_count = 0

    def execute(self) -> bool:
        """–ü—Ä–æ–≤–µ—Å—Ç–∏ –±–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–±–µ–¥–∏–ª"""
        battle_log(f"\n=== –ë–û–ô –° {self._get_enemy_name_instrumental().upper()} ===")
        battle_log(f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {self.enemy}")
        if self.enemy.features:
            battle_log(f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {self.enemy.features}")

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ö–æ–¥–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.character.turn_count = 0

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–∞
        attacker, defender, attacker_is_player = self._determine_first_attacker()
        battle_log(f"{'–í—ã' if attacker_is_player else self.enemy.name} –∞—Ç–∞–∫—É–µ—Ç–µ –ø–µ—Ä–≤—ã–º!")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—è
        while self.character.health > 0 and self.enemy.health > 0:
            self.turn_count += 1
            self.character.turn_count += 1
            battle_log(f"\n--- –•–æ–¥ {self.turn_count} ---")

            # –ê—Ç–∞–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
            damage = self._execute_attack(attacker, defender, attacker_is_player)

            if damage is not None and damage > 0:
                defender.health -= damage
                if attacker_is_player:
                    battle_log(f"–í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ {damage} —É—Ä–æ–Ω–∞!")
                else:
                    battle_log(f"{attacker.name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –±–æ—è
                if defender.health <= 0:
                    defender.health = 0
                    break

            # –ü–æ–∫–∞–∑ –∑–¥–æ—Ä–æ–≤—å—è
            battle_log(f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.character.health}/{self.character.max_health}")
            battle_log(f"–ó–¥–æ—Ä–æ–≤—å–µ {self.enemy.name}: {self.enemy.health}/{self.enemy.max_health}")

            # –°–º–µ–Ω–∞ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏ –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è
            attacker, defender, attacker_is_player = defender, attacker, not attacker_is_player

        victory = self.character.health > 0
        battle_log(f"\n{'üéâ –ü–û–ë–ï–î–ê!' if victory else 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï!'}")
        return victory

    def _get_enemy_name_instrumental(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –≤—Ä–∞–≥–∞ –≤ —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (—Å –∫–µ–º?)"""
        enemy_names = {
            "–ì–æ–±–ª–∏–Ω": "–ì–æ–±–ª–∏–Ω–æ–º",
            "–°–∫–µ–ª–µ—Ç": "–°–∫–µ–ª–µ—Ç–æ–º",
            "–°–ª–∞–π–º": "–°–ª–∞–π–º–æ–º",
            "–ü—Ä–∏–∑—Ä–∞–∫": "–ü—Ä–∏–∑—Ä–∞–∫–æ–º",
            "–ì–æ–ª–µ–º": "–ì–æ–ª–µ–º–æ–º",
            "–î—Ä–∞–∫–æ–Ω": "–î—Ä–∞–∫–æ–Ω–æ–º"
        }
        return enemy_names.get(self.enemy.name, self.enemy.name)

    def _determine_first_attacker(self) -> Tuple:
        if self.character.stats.agility >= self.enemy.agility:
            return self.character, self.enemy, True
        else:
            return self.enemy, self.character, False

    def _execute_attack(self, attacker, defender, attacker_is_player: bool) -> Optional[int]:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
        hit_chance = self._calculate_hit_chance(attacker, defender, attacker_is_player)
        if not hit_chance:
            if attacker_is_player:
                battle_log("–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å!")
            else:
                battle_log(f"{attacker.name} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!")
            return None

        # –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
        damage = self._calculate_damage(attacker, defender, attacker_is_player)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∑–∞—â–∏—Ç—ã
        if attacker_is_player:
            # –ü–µ—Ä—Å–æ–Ω–∞–∂ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–∞
            damage = self._apply_enemy_defense_effects(damage)
        else:
            # –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            damage = self.character.apply_defense_effects(damage, self.enemy.strength)

        return max(0, damage)

    def _calculate_hit_chance(self, attacker, defender, attacker_is_player: bool) -> bool:
        attacker_agi = attacker.stats.agility if attacker_is_player else attacker.agility
        defender_agi = defender.stats.agility if not attacker_is_player else defender.agility

        random_num = random.randint(1, attacker_agi + defender_agi)
        return random_num > defender_agi

    def _calculate_damage(self, attacker, defender, attacker_is_player: bool) -> int:
        if attacker_is_player:
            base_damage = self.character.weapon.damage + self.character.stats.strength
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∞—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            defender_agi = self.enemy.agility
            damage = self.character.apply_attack_effects(base_damage, defender_agi)
        else:
            base_damage = self.enemy.weapon_damage + self.enemy.strength
            damage = base_damage

            # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Ä–∞–≥–æ–≤
            if self.enemy.name == "–î—Ä–∞–∫–æ–Ω" and self.turn_count % 3 == 0:
                damage += 3  # –î—ã—Ö–∞–Ω–∏–µ –¥—Ä–∞–∫–æ–Ω–∞
                battle_log("üêâ –î—Ä–∞–∫–æ–Ω –¥—ã—à–∏—Ç –æ–≥–Ω—ë–º! +3 —É—Ä–æ–Ω–∞")

            if ("–°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞" in self.enemy.features and
                    self.enemy.agility > self.character.stats.agility):
                damage += 1  # –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–∏–∑—Ä–∞–∫–∞
                battle_log("üëª –ü—Ä–∏–∑—Ä–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∫—Ä—ã—Ç—É—é –∞—Ç–∞–∫—É! +1 —É—Ä–æ–Ω–∞")

        return damage

    def _apply_enemy_defense_effects(self, damage: int) -> int:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –∑–∞—â–∏—Ç—ã –≤—Ä–∞–≥–æ–≤"""
        if self.enemy.name == "–°–∫–µ–ª–µ—Ç" and self.character.weapon.damage_type.value == "–î—Ä–æ–±—è—â–∏–π":
            damage *= 2  # –£—è–∑–≤–∏–º–æ—Å—Ç—å —Å–∫–µ–ª–µ—Ç–∞ –∫ –¥—Ä–æ–±—è—â–µ–º—É –æ—Ä—É–∂–∏—é
            battle_log("üíÄ –°–∫–µ–ª–µ—Ç —É—è–∑–≤–∏–º –∫ –¥—Ä–æ–±—è—â–µ–º—É –æ—Ä—É–∂–∏—é! –£—Ä–æ–Ω —É–¥–≤–æ–µ–Ω")

        elif self.enemy.name == "–°–ª–∞–π–º" and self.character.weapon.damage_type.value == "–†—É–±—è—â–∏–π":
            damage = 0  # –ò–º–º—É–Ω–∏—Ç–µ—Ç —Å–ª–∞–π–º–∞ –∫ —Ä—É–±—è—â–µ–º—É –æ—Ä—É–∂–∏—é
            battle_log("üü¢ –°–ª–∞–π–º –Ω–µ–≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤ –∫ —Ä—É–±—è—â–µ–º—É –æ—Ä—É–∂–∏—é! –£—Ä–æ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

        elif "–ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞" in self.enemy.features:
            damage = max(0, damage - self.enemy.endurance)
            battle_log("ü™® –ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞ –ø–æ–≥–ª–æ—â–∞–µ—Ç —á–∞—Å—Ç—å —É—Ä–æ–Ω–∞!")

        return damage