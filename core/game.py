import random
from typing import Optional
from core.character import Character, CharacterStats, CharacterClass
from core.enemy import Enemy
from core.battle import Battle
from data.enemies import ENEMIES
from data.classes import CLASS_DATA, CharacterClass
from data.weapons import WEAPONS
from utils.dice import roll_stats
from utils.logger import game_log, success_log, error_log


class Game:
    def __init__(self):
        self.character: Optional[Character] = None
        self.victories: int = 0
        self.game_active: bool = True

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        game_log("=== –ê–í–¢–û–ë–ê–¢–¢–õ–ï–† ===")

        while self.game_active:
            if not self.character:
                self._create_character()

            if self.victories >= 5:
                self._victory_sequence()
                break

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞–≥–∞
            enemy_data = random.choice(ENEMIES)
            enemy = Enemy.from_data(enemy_data)

            # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—è
            battle = Battle(self.character, enemy)
            victory = battle.execute()

            if victory:
                self._handle_victory(enemy)
            else:
                self._handle_defeat()

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–æ—è–º–∏
            if self.game_active and self.victories < 5:
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def _create_character(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        game_log("\n=== –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê ===")

        stats = CharacterStats(*roll_stats())
        game_log(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –°–∏–ª–∞={stats.strength}, –õ–æ–≤–∫–æ—Å—Ç—å={stats.agility}, –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å={stats.endurance}")

        game_log("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:")
        classes = list(CharacterClass)
        for i, char_class in enumerate(classes, 1):
            class_data = CLASS_DATA[char_class]
            game_log(f"{i}. {class_data.name}")

        while True:
            try:
                choice = int(input("–í–∞—à –≤—ã–±–æ—Ä (1-3): "))
                if 1 <= choice <= 3:
                    selected_class = classes[choice - 1]
                    self.character = Character(selected_class, stats)
                    success_log(f"–°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {self.character}")
                    break
                else:
                    error_log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
            except ValueError:
                error_log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    def _handle_victory(self, enemy: Enemy):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã –≤ –±–æ—é"""
        self.victories += 1
        success_log(f"–ü–û–ë–ï–î–ê! –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {self.victories}/5")

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        self.character.health = self.character.max_health
        success_log("–ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ
        self._offer_weapon_swap(enemy)

        # –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –Ω–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
        if self.character.level < 3:
            self._level_up()
        else:
            game_log("üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")

    def _handle_defeat(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—é"""
        error_log("–ü–û–†–ê–ñ–ï–ù–ò–ï! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        self.character = None
        self.victories = 0

    def _offer_weapon_swap(self, enemy: Enemy):
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ –Ω–∞ –¥–æ–±—ã—Ç–æ–µ"""
        new_weapon = enemy.get_reward_weapon()
        current_weapon = self.character.weapon

        game_log(f"üéÅ –î–æ–±—ã—Ç–æ –æ—Ä—É–∂–∏–µ: {new_weapon.name} ({new_weapon.damage} —É—Ä–æ–Ω–∞)")
        game_log(f"üó°Ô∏è  –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ: {current_weapon.name} ({current_weapon.damage} —É—Ä–æ–Ω–∞)")

        if new_weapon.damage > current_weapon.damage:
            game_log("–•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ? (–¥/–Ω)")
            while True:
                choice = input().lower().strip()
                if choice in ['–¥', '–¥–∞', 'y', 'yes']:
                    self.character.weapon = new_weapon
                    success_log("–û—Ä—É–∂–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ!")
                    break
                elif choice in ['–Ω', '–Ω–µ—Ç', 'n', 'no']:
                    game_log("–û—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å—Ç–∞—Ä–æ–µ –æ—Ä—É–∂–∏–µ.")
                    break
                else:
                    error_log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥' –∏–ª–∏ '–Ω'")
        else:
            game_log("–ù–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ –Ω–µ –ª—É—á—à–µ —Ç–µ–∫—É—â–µ–≥–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

    def _level_up(self):
        """–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        game_log(f"\n‚≠ê === –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø {self.character.level} -> {self.character.level + 1} ===")

        # –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö –±–æ–Ω—É—Å–æ–≤
        bonuses = self.character.get_class_bonuses()
        if bonuses:
            game_log("–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å—ã:")
            for bonus in bonuses:
                game_log(f"  ‚Ä¢ {bonus}")

        game_log("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è:")
        classes = list(CharacterClass)
        for i, char_class in enumerate(classes, 1):
            class_data = CLASS_DATA[char_class]
            current_level = self.character.class_levels.get(char_class, 0)
            next_bonus = class_data.level_bonuses.get(current_level + 1, "–ù–µ—Ç –±–æ–Ω—É—Å–æ–≤")
            game_log(f"{i}. {class_data.name} (–£—Ä. {current_level}) ‚Üí {next_bonus}")

        while True:
            try:
                choice = int(input("–í–∞—à –≤—ã–±–æ—Ä (1-3): "))
                if 1 <= choice <= 3:
                    selected_class = classes[choice - 1]
                    self.character.level_up(selected_class)

                    class_data = CLASS_DATA[selected_class]
                    new_level = self.character.class_levels[selected_class]
                    new_bonus = class_data.level_bonuses.get(new_level, "")

                    success_log(f"–¢–µ–ø–µ—Ä—å –≤—ã {class_data.name} —É—Ä–æ–≤–Ω—è {new_level}!")
                    if new_bonus:
                        success_log(f"–ù–æ–≤—ã–π –±–æ–Ω—É—Å: {new_bonus}")
                    game_log(f"üìä –ù–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {self.character}")
                    break
                else:
                    error_log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
            except ValueError:
                error_log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    def _victory_sequence(self):
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –≤ –∏–≥—Ä–µ"""
        success_log("\n=== –ü–û–ë–ï–î–ê! ===")
        success_log("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ 5 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥ –∏ –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!")
        success_log("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ê–≤—Ç–æ–±–∞—Ç—Ç–ª–µ—Ä–∞!")
        success_log(f"–í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {self.character.get_class_name()}")
        self.game_active = False