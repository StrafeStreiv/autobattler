import random
from typing import Optional
from core.character import Character, CharacterStats, CharacterClass
from core.enemy import Enemy
from core.battle import Battle
from data.enemies import ENEMIES
from data.classes import CLASS_DATA
from utils.dice import roll_stats
from utils.logger import game_log


class Game:
    def __init__(self):
        self.character: Optional[Character] = None
        self.victories: int = 0
        self.game_active: bool = True

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        game_log("=== –ê–í–¢–û–ë–ê–¢–¢–õ–ï–† ===")

        while self.game_active:
            if not self.character:
                self._create_character()

            if self.victories >= 5:
                self._victory_sequence()
                break

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞–≥–∞
            enemy_data = random.choice(ENEMIES)
            enemy = Enemy.from_data(enemy_data)

            # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—è
            battle = Battle(self.character, enemy)
            victory = battle.execute()

            if victory:
                self._handle_victory(enemy)
            else:
                self._handle_defeat()

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–æ—è–º–∏
            if self.game_active and self.victories < 5:
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def _create_character(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        game_log("\n=== –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê ===")

        stats = CharacterStats(*roll_stats())
        game_log(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –°–∏–ª–∞={stats.strength}, –õ–æ–≤–∫–æ—Å—Ç—å={stats.agility}, –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å={stats.endurance}")

        game_log("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:")
        classes = list(CharacterClass)
        for i, char_class in enumerate(classes, 1):
            class_data = CLASS_DATA[char_class]
            game_log(f"{i}. {class_data.name}")

        while True:
            try:
                choice = int(input("–í–∞—à –≤—ã–±–æ—Ä (1-3): "))
                if 1 <= choice <= 3:
                    selected_class = classes[choice - 1]
                    self.character = Character(selected_class, stats)
                    game_log(f"\n–°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {self.character}")
                    break
                else:
                    game_log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
            except ValueError:
                game_log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    def _handle_victory(self, enemy: Enemy):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã –≤ –±–æ—é"""
        self.victories += 1
        game_log(f"\nüéâ –ü–û–ë–ï–î–ê! –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {self.victories}/5")

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        self.character.health = self.character.max_health
        game_log("üíö –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

    def _handle_defeat(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—é"""
        game_log("\nüíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        self.character = None
        self.victories = 0

    def _victory_sequence(self):
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –≤ –∏–≥—Ä–µ"""
        game_log("\nüéä === –ü–û–ë–ï–î–ê! ===")
        game_log("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ 5 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥ –∏ –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!")
        game_log("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üèÜ")
        self.game_active = False